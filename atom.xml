<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dinoxu.github.io</id>
    <title>迪诺的星辰大海</title>
    <updated>2021-02-26T09:09:04.484Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dinoxu.github.io"/>
    <link rel="self" href="https://dinoxu.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://dinoxu.github.io/images/avatar.png</logo>
    <icon>https://dinoxu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 迪诺的星辰大海</rights>
    <entry>
        <title type="html"><![CDATA[clang]]></title>
        <id>https://dinoxu.github.io/post/clang/</id>
        <link href="https://dinoxu.github.io/post/clang/">
        </link>
        <updated>2021-01-14T02:29:30.000Z</updated>
        <content type="html"><![CDATA[<p>预处理器会删除所有注释。通过执行clang -E mycode.c &gt; mycode.i可以看到这一点，这将给您一个mycode.i文件，其中包含所有预处理，但没有注释。在</p>
<p>您可以使用#pragma或未被剥离并被编译器忽略的操作。</p>
<p>tokken：表示来自预处理器的单个令牌。</p>
<pre><code> 令牌实际上是源代码的片段。 首先解析源代码
 转换成AST和游标之前先转换成令牌。

 令牌是从解析的TranslationUnit实例获取的。
</code></pre>
<p>course</p>
<p>在Clang AST中有两个基本单元是 statements (Stmt) 和 declarations (Decl)。</p>
<p>Clang用三种基本数据结构来描述AST：<br>
Type 类型<br>
Decl 声明<br>
Stmt 陈述</p>
<p>clang -Xclang -ast-dump -fsyntax-only D:\UGit\KOServer\KOServer\server\zonesvr\module_shop\handler_shop_test.cpp&gt;&gt;D:\handler_shop_test.txt</p>
<p>在阅读代码之前有必要先了解RecursiveASTVisitor/FrontEndAction/ASTConsumer的概念以及相互关系。</p>
<p>isitor/Action/Consumer结构<br>
RecursiveASTVisitor<br>
查找AST中的节点，既可以遍历AST，也可以使用Clang封装好的算法——RecursiveASTVisitor。继承该类并实现VisitCXXRecordDecl，该方法就在访问CXXRecordDecl节点时被触发。（CXXRecordDecl表示C++ class/union/struct）</p>
<p>FrontEndAction<br>
该类与编译实例打交道，词法分析、语法分析等过程都被编译实例隐藏了，编译实例会触发FrontEndAction定义好的方法，并把编译过程中的详细信息都告诉它。如编译哪个文件，编译参数等等。</p>
<p>FrontendAction是一个接口，它允许用户指定的actions作为编译的一部分来执行。</p>
<p>ASTConsumer<br>
ASTConsumer是FrontAction的一个子过程，在ASTConsumer中可以拿到整个编译单元，调用visitor进行遍历。</p>
<p>FrontEndAction(编译实例获得AST入口)——》ASTConsumer（获得编译单元）——》RecursiveASTVisitor（遍历AST）<br>
*ASTContext是编译实例保存所有AST信息的一种数据结构，主要包括编译期间的符号表和AST原始形式。</p>
<pre><code>clang -Xclang -ast-dump &lt;oc源文件&gt;

TranslationUnitDecl
|- TypedefDecl
|- ...
|- FunctionDecl
|   |- ParamVarDecl
|   |- ...
`- ...

</code></pre>
<p>在遍历AST的时候，需要从该数据结构中提取节点的相关信息，常用的遍历方法一般都是先序遍历或者层次遍历。<br>
在遍历过程中，遇到了一个节点就进行检查。<br>
CursorKind指的是这个节点在AST中的位置例如（函数，类，参数定义等）<br>
TypeKind指的是这个节点的语义类别，例如这个参数的类别是const char，int等类别。<br>
get_children()<br>
&quot;&quot;&quot;<br>
这个方法用来获取其子节点列表的迭代器。<br>
&quot;&quot;&quot;<br>
get_tokens()<br>
'''<br>
得到了其每个分词的列表的迭代器。<br>
'''</p>
<p>解析C++符号修饰别名(mangled name)<br>
相比C语言，C++支持函数重载、类、模版等各种特性，如果C++的符号修饰仍按照C那样直接使用对应名称，虽然可读性很好，却不可避免的会出现各种错乱，于是C++符号修饰别名(mangled name)被设计出来， 用来解决上述问题，然而修饰规则取决于编译器实现，没有统一标准，比如gcc、msvc就各有一套，但好在都提供了相应接口进行解析(demangle)，这里有个网站http://demangler.com/可以在线解析</p>
<p>Mangled name的结构(borland) - https://blog.csdn.net/ccfxue/article/details/52796836<br>
Mangled name的结构<br>
mangle后的函数名结构是@UnitName@ClassName@FunctionName@$Params</p>
<p>所谓静态分析是指在不运行待分析的程序的前提下进行分析，那么动态分析自然就是记录程序实际运行时的函数调用情况了。<br>
分析C++的调用图，还是借助编译器比较实在。</p>
<p>动态：与静态分析相比，它能获得更多的信息，比如函数调用的先后顺序和次数；不过也有一定的缺点，比如程序中语句的某些分支可能没有执行到，这些分支中调用的函数自然就没有记录下来。</p>
<p>一是借助gprof的call graph功能（参数-q），二是利用GCC的 -finstrument-functions 参数。<br>
使用gcc的-finstrument-functions选项进行函数跟踪<br>
gdb：https://blog.csdn.net/jfu22/article/details/102528660<br>
https://blog.csdn.net/piaopiaopiaopiaopiao/article/details/105834121</p>
<p>用Perl脚本分析gprof的输出，生成Graphviz的dot输入，就能绘制call graph了。</p>
<p>GCC的-finstrument-functions 参数的作用是在程序中加入hook，让它在每次进入和退出函数的时候分别调用下面这两个函数：<br>
void __cyg_profile_func_enter( void *func_address, void *call_site )<br>
<strong>attribute</strong> ((no_instrument_function));</p>
<p>void <strong>cyg_profile_func_exit ( void *func_address, void *call_site )<br>
<strong>attribute</strong> ((no_instrument_function));<br>
当然，这两个函数本身不能被钩住（使用no_instrument_function这个__attribute</strong>），不然就反反复复万世不竭了:) 这里获得的是函数地址，需要用binutils中的addr2line这个小工具转换为函数名，如果是C++函数，还要用c++filt进行name demangle。</p>
<p>从适应能力上看，源码分析法是最强的，即便源码中有语法错，头文件不全也没关系，它照样能分析个八九不离十。<br>
至于动态分析，要求最高——程序需得运行起来。<br>
而基于编译器的分析法对源码的要求要高一些，至少能编译通过（gcc 参数 -c）——能产生object file，不一定要链接得到可执行文件。这至少要求源码没有语法错，其中调用的函数不一定有定义(definition)，但要有声明(declaration)，也就是说头文件要齐全。</p>
<p>https://blog.csdn.net/unbutun/article/details/2828839?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control<br>
calltree  2.3<br>
下载地点 http://linux.softpedia.com/progDownload/calltree-Download-971.html<br>
或者<br>
http://mirror.lzu.edu.cn/software/calltree/calltree-2.3.tar.bz2</p>
<p>gprof 2.18.0.20080103   在ubuntu/debian下直接安装即可<br>
http://citeseer.ist.psu.edu/graham82gprof.html</p>
<p>kprof 1.4.3 (在ubuntu/debian下直接用apt-get安装)<br>
http://kprof.sourceforge.net/</p>
<p>静态<br>
静态分析又有两种方法，一是分析源码，二是分析编译后的目标文件。<br>
Doxygen是源码文档化工具，也能绘制调用图，它似乎是自己分析源码获得函数调用关系的。<br>
GNU cflow也是类似的工具，不过它似乎偏重分析流程图（flowchart）。</p>
<p>给编译器打补丁，让它在编译时顺便记录函数调用关系：CodeViz（其灵感来自Martin Devera (Devik) 的工具）就属于此类，它（1.0.9版）给GCC 3.4.1打了个补丁<br>
让编译器自己dump出调用关系，然后分析分析：egypt的思路</p>
<p>用cflow工具生成代码函数调用关系<br>
https://www.freesion.com/article/8192424715/<br>
https://blog.csdn.net/Wind4study/article/details/53366419?utm_source=blogxgwz5&amp;utm_medium=distribute.pc_relevant_download.none-task-blog-baidujs-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_download.none-task-blog-baidujs-1.nonecase</p>
<p>egypt + graphviz生成C/C++源代码调用图（一）<br>
https://blog.csdn.net/kh815/article/details/103073736?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-6&amp;spm=1001.2101.3001.4242</p>
<p>pvtrace c/c++函数调用关系生成工具<br>
https://download.csdn.net/download/frcheng/8892599?utm_medium=distribute.pc_relevant.none-task-download-BlogCommendFromBaidu-5.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-download-BlogCommendFromBaidu-5.control</p>
<p>绘制函数调用图（call graph）（1）：专栏开篇<br>
https://blog.csdn.net/benkaoya/article/details/79750745<br>
绘制函数调用图（call graph）（4）：doxygen + graphviz<br>
https://blog.csdn.net/benkaoya/article/details/79763668?utm_source=blogxgwz5<br>
绘制函数调用图（call graph）（3）：codeviz + graphviz<br>
https://blog.csdn.net/benkaoya/article/details/79752738?utm_source=blogxgwz4</p>
<p>ps：分析源码获得的调用图的质量取决于分析工具对编程语言的理解程度，比如能不能找出正确的C++重载函数。</p>
<p>clang plugin获取函数调用链，但替换的clang编译器的语法规则较xcode clang严格很多，导致出现很多编译问题，这里耗费的人力比较大；<br>
clang提供了两种方法：ASTMatchers和RecursiveASTVisitor，RecursiveASTVisitor有两种方式实现，一是clang plugin，二是libtooling</p>
<ul>
<li>clang plugin：clang插件作为编译的一部分，在编译器运行时加载，很容易集成到构建环境中。这样通过替换xcode中clang编译器和加载clang插件分析AST，可以完全控制clang AST。<br>
clang plugin在编译器运行时能够拿到完整的AST，但替换的clang编译器会出现很多编译问题，导致业务接入成本和解决编译问题的人力成本大大加大。</li>
</ul>
<p>libtooling：不需要在编译器运行时加载，针对每个源程序生成相应的分析源码以及对应的AST，但同样的都是用RecursiveASTVisitor访问AST。<br>
libtooling分析AST无需编译，但整个过程需要逐层遍历，是由上至下的分析查找，并将系统类库和函数分析遍，还会存在重复分析，这样导致分析耗时特别长。</p>
<p>clang的ASTMatcher，速度快，可以让我们高效的匹配到我们想要的节点；其内部可以嵌套多个ASTMatcher，通过调用构造函数创建，或者构建成一个ASTMatchers的树，使得匹配更加具体准确；配合上clang-query的快速检验正确性，将使我们效率成倍提升。</p>
<p>存在的问题是ASTMatcher没有在编译阶段获取AST，获取的节点数据可能没有clang plugin数据全。</p>
<p>对于C++语言，分析函数调用关系链常用的几种经典做法包括：</p>
<p>语法树分析</p>
<p>编译器数据</p>
<p>运行时插桩或hook</p>
<p>一般情况下，我们也会从静态和动态的角度来获取函数之间的调用关系，也就是静态分析和动态分析，所谓静态分析是指在不执行代码的情况下对其进行分析评估的过程，即在编译前分析源代码获得函数调用关系链。那么动态分析自然就是记录程序实际运行时的函数调用情况。</p>
<p>静态分析又有两种方法，一是分析源码（例如doxygen），二是分析编译后的目标文件（例如IDA）。分析源码获得的调用图的质量取决于分析工具对编程语言的理解程度，比如能不能找出正确的C++重载函数。</p>
<p>静态代码分析工具汇总<br>
https://www.jianshu.com/p/03f6845ee32c</p>
<p>各类分析函数调用关系图的工具<br>
https://blog.csdn.net/unbutun/article/details/2828839?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control</p>
<p>一种基于libclang的函数调用关系生成方法<br>
https://www.doc88.com/p-3317610750780.html</p>
<p>How to write RecursiveASTVisitor based ASTFrontendActions.-https://clang.llvm.org/docs/RAVFrontendAction.html</p>
<p>如何编写基于 ASTFrontendActions 的 RecursiveASTVisitor-https://blog.csdn.net/qq_23599965/article/details/90696621</p>
<p>利用Clang（Python接口）来解析C++<br>
https://my.oschina.net/u/4361248/blog/3558918</p>
<p>（）原创）clang的python接口教程（二）<br>
https://blog.csdn.net/wangtua/article/details/78612331</p>
<p>使用libclang解析C++代码<br>
https://blog.csdn.net/qq_23599965/article/details/90636948</p>
<p>https://www.dazhuanlan.com/2019/10/16/5da6bcad62610/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux服务器管理]]></title>
        <id>https://dinoxu.github.io/post/linux-fu-wu-qi-guan-li/</id>
        <link href="https://dinoxu.github.io/post/linux-fu-wu-qi-guan-li/">
        </link>
        <updated>2020-12-30T03:31:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="创建用户组">创建用户组</h1>
<p>查看当前所有用户组：cat /etc/group<br>
groups 查看当前登录用户的组内成员<br>
groups 用户名 查看用户所在的组,以及组内成员<br>
whoami 查看当前登录用户名</p>
<p>groupadd  用户组<br>
groupdel 用户组<br>
设置用户组密码命令：<br>
[root@local opt]#gpasswd 用户组名</p>
<p>groupmod 选项 用户组<br>
修改用户组名命令：<br>
[root@local opt]#groupmod -n 名称</p>
<p>设置用户组管理员命令：<br>
[root@local opt]#gpasswd -A 用户名 用户组名</p>
<p>添加某帐号到组命令：<br>
[root@local opt]#gpasswd -M 用户名 用户组名</p>
<p>从组中删除某帐号命令：<br>
[root@local opt]#gpasswd -d 用户名 用户组名</p>
<p>passwd相关参数操作：<br>
-l 锁用户<br>
-u 解锁用户<br>
-n 天数  密码不可改天数<br>
-x 天数  密码过期天数<br>
-w 天数  警告天数</p>
<p>/etc/group文件包含所有组<br>
/etc/group 的内容包括用户组（Group）、用户组口令、GID及该用户组所包含的用户（User,每个用户之间用,号分割），每个用户组一条记录，格式如下：组名:口令:组标识号:组内用户列表group_name:passwd:GID:user_list<br>
&quot;组名&quot;是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。<br>
&quot;口令&quot;字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。<br>
&quot;组标识号&quot;与用户标识号类似，也是一个整数，被系统内部用来标识组。<br>
&quot;组内用户列表&quot;是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p>
<p>/etc/shadow<br>
/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</p>
<p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用&quot;:&quot;隔开。这些字段是：</p>
<p>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志<br>
&quot;登录名&quot;是与/etc/passwd文件中的登录名相一致的用户账号<br>
&quot;口令&quot;字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。<br>
&quot;最后一次修改时间&quot;表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。<br>
&quot;最小时间间隔&quot;指的是两次修改口令之间所需的最小天数。<br>
&quot;最大时间间隔&quot;指的是口令保持有效的最大天数。<br>
&quot;警告时间&quot;字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。<br>
&quot;不活动时间&quot;表示的是用户没有登录活动但账号仍能保持有效的最大天数。<br>
&quot;失效时间&quot;字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</p>
<p>/etc/passwd<br>
/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：<br>
用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p>
<h1 id="创建用户">创建用户</h1>
<p>查看用户：id 用户名<br>
添加用户: useradd -m 用户名</p>
<p>参数说明：</p>
<p>选项:</p>
<p>-c comment 指定一段注释性描述。<br>
-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。<br>
-g 用户组 指定用户所属的用户组。<br>
-G 用户组，用户组 指定用户所属的附加组。<br>
-s Shell文件 指定用户的登录Shell。<br>
-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。<br>
用户名:</p>
<p>指定新账号的登录名。</p>
<p>useradd/usermod -s /bin/sh -g group –G adm,root gem<br>
root用户登录情况下不可以使用命令修改，否则会出现usermod: user root is currently used by process 1的错误提示，但是可以直接通过修改修改/etc/passwd文件来设置。</p>
<p>修改了root用户的主目录，登录发现linux的命令行界面显示的不是路径，而是-bash-4.1#<br>
解决办法：1、修改<sub>/.bash_profile文件，在</sub>/.bash_profile文件后面加上一行：<br>
export PS1='[\u@\h \W]$'</p>
<p>PS1：命令行提示符环境变量<br>
\u ：显示用户名称<br>
\h：显示主机名称（全称）<br>
\W ：显示当前目录名称</p>
<p>2、修改好之后，source ~/.bash_profile使文件生效，然后回车，路径显示随即正常</p>
<p>设置密码: passwd 用户名<br>
删除用户: userdel -r 用户名</p>
<p>修改账号：usermod 选项 用户名<br>
修改用户信息命令：<br>
[root@local opt]#usermod 参数 用户名<br>
参数:<br>
-c 说明<br>
-g 组名 初始用户组<br>
-e 过期日期 格式：YYYY-MM-DD<br>
-G 组名 其他用户组<br>
-l 修改用户名<br>
-L 锁定账号（在/etc/shadow文件中用户对应密码密码串的前面加上两个叹号(!!)）<br>
-U 解锁</p>
<p>**不加-m只是创建了一个用户名，没有在/home目录下创建同名文件夹，也没有创建密码，无法登录服务器。<br>
userdel -r 用户名: 将它留在系统上的文件也会删除。<br>
个人用户的权限只可以在本home下有完整权限，其他目录需要别人授权。<br>
**</p>
<h1 id="用户关联用户组">用户关联用户组</h1>
<p>加入<br>
gpasswd -a 用户名 组名<br>
移出<br>
gpasswd -d 用户名 组名</p>
<h1 id="权限管理">权限管理</h1>
<p>个人用户的权限只可以在本home下有完整权限，其他目录需要别人授权。经常需要root用户的权限，可以通过修改sudoers文件来赋予权限。</p>
<p>新创建的用户并不能使用sudo命令，需要给他添加授权。</p>
<p>1、查找sudoers文件路径并赋予权限<br>
[root@localhost~]# whereis sudoers                     # 查找sudoers文件路径<br>
sudoers: /etc/sudoers /etc/sudoers.d /usr/share/man/man5/sudoers.5.gz<br>
[root@localhost~]# ls -l /etc/sudoers                  # 查看权限<br>
-r--r----- 1 root root 3938 Sep  6  2017 /etc/sudoers  # 只有读权限<br>
[root@localhost~]# chmod -v u+w /etc/sudoers           # 赋予读写权限<br>
mode of ‘/etc/sudoers’ changed from 0440 (r--r-----) to 0640 (rw-r-----)</p>
<p>2、修改sudoers文件</p>
<h2 id="allow-root-to-run-any-commands-anywhere">Allow root to run any commands anywhere</h2>
<p>root ALL=(ALL) ALL<br>
prefma ALL=(ALL) ALL #这个是新用户</p>
<p>3、收回权限<br>
[root@localhost~]# chmod -v u-w /etc/sudoers<br>
mode of ‘/etc/sudoers’ changed from 0640 (rw-r-----) to 0440 (r--r-----)</p>
<p>##acl权限分配<br>
//设置文件权限<br>
setfacl -m u:testuser:rwx file<br>
//查看文件权限<br>
getfacl file<br>
//删除用户权限<br>
setfacl -x user:testuser file<br>
//清空文件权限<br>
setfacl -b file<br>
//对目录、子目录及文件设置权限<br>
setfacl -m u:testuser:rwx -R /file/<br>
//设置后期添加的子目录和文件继承父目录权限<br>
setfacl -m d:u:testuser:rwx -R /file/</p>
<p>文件的创建和删除权限：<br>
需要对目录设置acl权限即可；<br>
对文件设置权限表示对该文件内容有相应权限，没有删除文件的权限；</p>
<p>##设置用户对命令的执行权限-visudo<br>
1.设置sudo授权命令<br>
//打开配置文件<br>
visudo<br>
//末尾追加<br>
user1 localhost=/user/sbin/useradd,/user/sbin/userdel<br>
　　2.sudo授权命令<br>
//添加用户<br>
sudo /user/sbin/useradd testuser<br>
/删除用户<br>
sudo /user/sbin/userdel -r testuser<br>
　　3.无密码sudo授权命令<br>
//打开配置文件<br>
visudo<br>
//末尾追加<br>
user1 localhost=NOPASSWD: /user/sbin/useradd,/user/sbin/userdel<br>
user1 ALL=NOPASSWD: /user/sbin/useradd,/user/sbin/userdel</p>
<h1 id="参考">参考</h1>
<p>Linux用户及权限分配[https://www.cnblogs.com/anech/p/6920509.html]<br>
linux下查看所有用户及所有用户组[https://www.cnblogs.com/pengyunjing/p/8543026.html]</p>
<p>#附录</p>
<h2 id="linux-查看用户及用户组的方法">linux 查看用户及用户组的方法</h2>
<p>groupadd 选项 用户组<br>
可以使用的选项有：</p>
<p>-g GID 指定新用户组的组标识号（GID）。<br>
-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</p>
<p>groupmod 选项 用户组<br>
常用的选项有：</p>
<p>-g GID 为用户组指定新的组标识号。<br>
-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。<br>
-n新用户组 将用户组的名字改为新名字</p>
<h2 id="whois功能说明查找并显示用户信息-语-法whois-帐号名称补充说明whois指令会去查找并显示指定帐号的用户相关信息因为它是到network-solutions-的whois数据库去查找所以该帐号名称必须在上面注册方能寻获且名称没有大小写的差别">whois<br>
功能说明：查找并显示用户信息。<br>
语　　法：whois [帐号名称]<br>
补充说明：whois指令会去查找并显示指定帐号的用户相关信息，因为它是到Network Solutions 的WHOIS数据库去查找，所以该帐号名称必须在上面注册方能寻获，且名称没有大小写的差别。</h2>
<h2 id="whoami功能说明先似乎用户名称-语-法whoami-help-version补充说明显示自身的用户名称本指令相当于执行id-un指令-参-数-help-在线帮助-version-显示版本信息">whoami<br>
功能说明：先似乎用户名称。<br>
语　　法：whoami [--help][--version]<br>
补充说明：显示自身的用户名称，本指令相当于执行&quot;id -un&quot;指令。<br>
参　　数：<br>
--help 　在线帮助。<br>
--version 　显示版本信息。</h2>
<h2 id="who功能说明显示目前登入系统的用户信息-语-法who-himqsw-help-versionam-i记录文件补充说明执行这项指令可得知目前有那些用户登入系统单独执行who指令会列出登入帐号使用的-终端机登入时间以及从何处登入或正在使用哪个x显示器-参-数-h或-heading-显示各栏位的标题信息列-i或-u或-idle-显示闲置时间若该用户在前一分钟之内有进行任何动作将标示成号如果该用户已超过24小时没有任何动作则标示出old字符串-m-此参数的效果和指定am-i字符串相同-q或-count-只显示登入系统的帐号名称和总人数-s-此参数将忽略不予处理仅负责解决who指令其他版本的兼容性问题-w或-t或-mesg或-message或-writable-显示用户的信息状态栏-help-在线帮助-version-显示版本信息">who<br>
功能说明：显示目前登入系统的用户信息。<br>
语　　法：who [-Himqsw][--help][--version][am i][记录文件]<br>
补充说明：执行这项指令可得知目前有那些用户登入系统，单独执行who指令会列出登入帐号，使用的 　　　终端机，登入时间以及从何处登入或正在使用哪个X显示器。<br>
参　　数：<br>
-H或--heading 　显示各栏位的标题信息列。<br>
-i或-u或--idle 　显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成&quot;.&quot;号，如果该用户已超过24小时没有任何动作，则标示出&quot;old&quot;字符串。<br>
-m 　此参数的效果和指定&quot;am i&quot;字符串相同。<br>
-q或--count 　只显示登入系统的帐号名称和总人数。<br>
-s 　此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题。<br>
-w或-T或--mesg或--message或--writable 　显示用户的信息状态栏。<br>
--help 　在线帮助。<br>
--version 　显示版本信息。</h2>
<h2 id="w功能说明显示目前登入系统的用户信息-语-法w-fhlsuv用户名称补充说明执行这项指令可得知目前登入系统的用户有那些人以及他们正在执行的程序-单独执行w指令会显示所有的用户您也可指定用户名称仅显示某位用户的相关信息-参-数-f-开启或关闭显示用户从何处登入系统-h-不显示各栏位的标题信息列-l-使用详细格式列表此为预设值-s-使用简洁格式列表不显示用户登入时间终端机阶段作业和程序所耗费的cpu时间-u-忽略执行程序的名称以及该程序耗费cpu时间的信息-v-显示版本信息">w<br>
功能说明：显示目前登入系统的用户信息。<br>
语　　法：w [-fhlsuV][用户名称]<br>
补充说明：执行这项指令可得知目前登入系统的用户有那些人，以及他们正在执行的程序。单独执行w<br>
指令会显示所有的用户，您也可指定用户名称，仅显示某位用户的相关信息。<br>
参　　数：<br>
-f 　开启或关闭显示用户从何处登入系统。<br>
-h 　不显示各栏位的标题信息列。<br>
-l 　使用详细格式列表，此为预设值。<br>
-s 　使用简洁格式列表，不显示用户登入时间，终端机阶段作业和程序所耗费的CPU时间。<br>
-u 　忽略执行程序的名称，以及该程序耗费CPU时间的信息。<br>
-V 　显示版本信息。</h2>
<h2 id="finger命令finger-命令的功能是查询用户的信息通常会显示系统中某个用户的用户名-主目录-停滞时间-登录时间-登录shell等信息-如果要查询远程机上的用户信息需要在用户名后面接主机名采用用户名主机名的格式不过要查询的网络主机需要运行finger守护进程-该命令的一般格式为finger-选项-使用者-用户主机命令中各选项的含义如下-s-显示用户的注册名-实际姓名-终端名称-写状态-停滞时间-登录时间等信息-l-除了用-s选项显示的信息外还显示用户主目录-登录shell-邮件状态等信息以及用户主目录下的plan-project和forward文件的内容-p-除了不显示plan文件和project文件以外与-l选项相同-例在本地机上使用finger命令-finger-xxqlogin-xxq-namedirectory-homexxq-shell-binbashlast-login-thu-jan-1-2143-cst-on-tty1no-mailno-plan-fingerlogin-name-tty-idle-login-time-office-office-phoneroot-root-1-28-nov-25-0917">finger命令<br>
finger 命令的功能是查询用户的信息，通常会显示系统中某个用户的用户名、主目录、停滞时间、登录时间、登录shell等信息。如果要查询远程机上的用户信息，需要在用户名后面接“@主机名”，采用[用户名@主机名]的格式，不过要查询的网络主机需要运行finger守护进程。<br>
该命令的一般格式为：<br>
finger [选项] [使用者] [用户@主机]<br>
命令中各选项的含义如下：<br>
-s 显示用户的注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息。<br>
-l 除了用-s选项显示的信息外，还显示用户主目录、登录shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。<br>
-p 除了不显示.plan文件和.project文件以外，与-l选项相同。　<br>
[例]在本地机上使用finger命令。<br>
$ finger xxq<br>
Login: xxq Name:<br>
Directory: /home/xxq Shell: /bin/bash<br>
Last login Thu Jan 1 21:43 （CST） on tty1<br>
No mail.<br>
No Plan.　<br>
$ finger<br>
Login Name Tty Idle Login Time Office Office Phone<br>
root root *1 28 Nov 25 09:17<br>
……</h2>
<h2 id="etcgroup文件包含所有组etcshadow和etcpasswd系统存在的所有用户名修改当前用户所属组的方法usermod-或者可以直接修改-etcpaaawd文件即可">/etc/group文件包含所有组<br>
/etc/shadow和/etc/passwd系统存在的所有用户名<br>
修改当前用户所属组的方法<br>
usermod 或者可以直接修改 /etc/paaawd文件即可</h2>
<h2 id="vlockvirtual-console-lock功能说明锁住虚拟终端-语-法vlock-achv补充说明执行vlock指令可锁住虚拟终端避免他人使用-参-数-a或-all-锁住所有的终端阶段作业如果您在全屏幕的终端中使用本参数则会将用键盘切换终端机的功能一并关闭-c或-current-锁住目前的终端阶段作业此为预设值-h或-help-在线帮助-v或-version-显示版本信息">vlock(virtual console lock)<br>
功能说明：锁住虚拟终端。<br>
语　　法：vlock [-achv]<br>
补充说明：执行vlock指令可锁住虚拟终端，避免他人使用。<br>
参　　数：<br>
-a或--all 　锁住所有的终端阶段作业，如果您在全屏幕的终端中使用本参数，则会将用键盘<br>
切换终端机的功能一并关闭。<br>
-c或--current 　锁住目前的终端阶段作业，此为预设值。<br>
-h或--help 　在线帮助。<br>
-v或--version 　显示版本信息。</h2>
<h2 id="usermod功能说明修改用户帐号-语-法usermod-lu-c-备注-d-登入目录-e-有效期限-f-缓冲天数-g-群组-g-群组-l-帐号名称-s-u-用户帐号补充说明usermod可用来修改用户帐号的各项设定-参-数-c备注-修改用户帐号的备注文字-d登入目录-修改用户登入时的目录-e有效期限-修改帐号的有效期限-f缓冲天数-修改在密码过期后多少天即关闭该帐号-g群组-修改用户所属的群组-g群组-修改用户所属的附加群组-l帐号名称-修改用户帐号名称-l-锁定用户密码使密码无效-s-修改用户登入后所使用的shell-u-修改用户id-u-解除密码锁定">usermod<br>
功能说明：修改用户帐号。<br>
语　　法：usermod [-LU][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-l &lt;帐号名称&gt;][-s ][-u ][用户帐号]<br>
补充说明：usermod可用来修改用户帐号的各项设定。<br>
参　　数：<br>
-c&lt;备注&gt; 　修改用户帐号的备注文字。<br>
-d登入目录&gt; 　修改用户登入时的目录。<br>
-e&lt;有效期限&gt; 　修改帐号的有效期限。<br>
-f&lt;缓冲天数&gt; 　修改在密码过期后多少天即关闭该帐号。<br>
-g&lt;群组&gt; 　修改用户所属的群组。<br>
-G&lt;群组&gt; 　修改用户所属的附加群组。<br>
-l&lt;帐号名称&gt; 　修改用户帐号名称。<br>
-L 　锁定用户密码，使密码无效。<br>
-s 　修改用户登入后所使用的shell。<br>
-u 　修改用户ID。<br>
-U 　解除密码锁定。</h2>
<h2 id="userdel功能说明删除用户帐号-语-法userdel-r用户帐号补充说明userdel可删除用户帐号与相关的文件-若不加参数则仅删除用户帐号而不删除相关文件-参-数-f-删除用户登入目录以及目录中所有文件">userdel<br>
功能说明：删除用户帐号。<br>
语　　法：userdel [-r][用户帐号]<br>
补充说明：userdel可删除用户帐号与相关的文件。若不加参数，则仅删除用户帐号，而不删除相关文件。<br>
参　　数：<br>
-f 　删除用户登入目录以及目录中所有文件。</h2>
<h2 id="userconf功能说明用户帐号设置程序-语-法userconf-addgroup-群组-adduser-用户id群组用户名称-delgroup-群组-deluser-用户id-help补充说明userconf实际上为linuxconf的符号连接提供图形界面的操作方式供管理员建立与管理各类帐号-若不加任何参数即进入图形界面-参-数-addgroup群组-新增群组-adduser用户id群组用户名称-新增用户帐号-delgroup群组-删除群组-deluser用户id-删除用户帐号-help-显示帮助">userconf<br>
功能说明：用户帐号设置程序。<br>
语　　法：userconf [--addgroup &lt;群组&gt;][--adduser &lt;用户ID&gt;&lt;群组&gt;&lt;用户名称&gt;][--delgroup &lt;群组&gt;][--deluser &lt;用户ID&gt;][--help]<br>
补充说明：userconf实际上为linuxconf的符号连接，提供图形界面的操作方式，供管理员建立与管理各类帐号。若不加任何参数，即进入图形界面。<br>
参　　数：<br>
--addgroup&lt;群组&gt; 　新增群组。<br>
--adduser&lt;用户ID&gt;&lt;群组&gt;&lt;用户名称&gt; 　新增用户帐号。<br>
--delgroup&lt;群组&gt; 　删除群组。<br>
--deluser&lt;用户ID&gt; 　删除用户帐号。<br>
--help 　显示帮助。</h2>
<p>useradd<br>
功能说明：建立用户帐号。<br>
语　　法：useradd [-mMnr][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s ][-u ][用户帐号] 或 useradd -D [-b][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s ]<br>
补充说明：useradd可用来建立用户帐号。帐号建好之后，再用passwd设定帐号的密码．而可用userdel删除帐号。使用useradd指令所建立的帐号，实际上是保存在/etc/passwd文本文件中。<br>
参　　数：<br>
-c&lt;备注&gt; 　加上备注文字。备注文字会保存在passwd的备注栏位中。　<br>
-d&lt;登入目录&gt; 　指定用户登入时的启始目录。<br>
-D 　变更预设值．<br>
-e&lt;有效期限&gt; 　指定帐号的有效期限。<br>
-f&lt;缓冲天数&gt; 　指定在密码过期后多少天即关闭该帐号。<br>
-g&lt;群组&gt; 　指定用户所属的群组。<br>
-G&lt;群组&gt; 　指定用户所属的附加群组。<br>
-m 　自动建立用户的登入目录。<br>
-M 　不要自动建立用户的登入目录。<br>
-n 　取消建立以用户名称为名的群组．<br>
-r 　建立系统帐号。<br>
-s　 　指定用户登入后所使用的shell。<br>
-u 　指定用户ID。</p>
<p>用户分为三类：<br>
1、超级用户：root uid=0,简单来说uid为0的用户就是超级用户。<br>
2、虚拟用户：存在linux中，满足文件或者程序运行的需要，而创建的。不能登录，不能使用。uid=1-499,1-999(centos7)<br>
3、普通用户：管理员root创建的用户。uid=500+，1000+（centos7）</p>
<p>用户组就是具有相同特征的用户的集合。一个组可以包含多个用户，每个用户也可以属于不同的组。用户组的目的方便管理员对用户进行集中管理。用户组也分为两类：系统组和普通组。</p>
<p>用户和用户组的关系：<br>
一对一：一个用户存在一个组，也可以是组中唯一成员<br>
一对多：一个用户属于多个组，只有一个主组，其余为附加组<br>
多对一：多个用户存在于一个组<br>
多对多：多个用户可以存在多个组</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python开发环境部署]]></title>
        <id>https://dinoxu.github.io/post/python-kai-fa-huan-jing-bu-shu/</id>
        <link href="https://dinoxu.github.io/post/python-kai-fa-huan-jing-bu-shu/">
        </link>
        <updated>2020-12-29T03:36:54.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="安装">安装</h1>
<pre><code>$ wget https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz 
sudo tar -zxvf Python-2.7.14.tgz  -C /usr/local/
$  cd /usr/local/Python-2.7.14
#prefix 参数是指把 python 安装在 /usr/local/python2.7 文件夹下
$ sudo ./configure --prefix=/usr/local/python2.7&amp;&amp; sudo make &amp;&amp; sudo make install
</code></pre>
<h1 id="多版本安装">多版本安装</h1>
<p>建立软链接（ln 命令源路径必须是绝对路径，否则创建出来的软链接无效。）</p>
<pre><code>sudo rm -rf /usr/bin/python
sudo ln -s /usr/local/python2.7/python2 /usr/bin/python
sudo rm -rf /usr/bin/python3
sudo ln -s /usr/local/python3.6/bin/python3 /usr/bin/python3
</code></pre>
<h1 id="检查">检查</h1>
<pre><code>which python #查看python命令的可执行文件存放路径
pip/pip3 -V # 查看pip的版本号
</code></pre>
<h1 id="ide设置">IDE设置</h1>
<h2 id="pycharm">pycharm</h2>
<ul>
<li>头文件设置：File -  Settings - Editor - File and Code Templates - Python Script:</li>
</ul>
<pre><code>#!/usr/bin/env python
#-*- coding:utf-8 -*-
 '''
  @author: dinoxu
  @license: (C) Copyright 2020-2021, Node Supply Chain Manager Corporation Limited.
  @contact: xxx@emal.com
  @software: pycharm
  @file: ${NAME}.py
  @time: ${DATE} ${TIME}
  @desc:
  '''
import platform
reload(sys)
sys.setdefaultencoding('utf8')

DEBUG = False
if(platform.system()=='Windows'):
    DEBUG = True
elif(platform.system()=='Linux'):
    DEBUG = False
else:
    DEBUG = False


if __name__ == &quot;__main__&quot;:
    pass
</code></pre>
<ul>
<li>linux远程开发<br>
--Tools - Deployment - Configuration... -  Connection（tab） ：选择Type=SFTP，完善相关信息。<br>
--同上 - Mapplings：映射本地目录<br>
--通过Files - settings - Project - Project Interpreter：通过设置按钮，配置远程python解释器。<br>
设置成功后，可以通过Tools - Deployment -Upload to...上传文件，也可以在Tools - Deployment -Options...中设置保存的同时上传。</li>
</ul>
<p>##pip</p>
<ul>
<li>
<p>uninstall : python -m pip uninstall pip</p>
</li>
<li>
<p>pip install --upgrade pip</p>
</li>
<li>
<p>源设置<br>
-- windows： C:\Users\xxx\pip.ini<br>
-- linux/mac: mkdir ~/.pip; vim ~/.pip/pip.conf</p>
</li>
</ul>
<pre><code>#pip源配置文件可以放置的位置
Linux/Unix:
/etc/pip.con
~/.pip/pip.conf （每一个我都找了都没有，所以我是在这个文件夹中创建的pip.conf文件）
~/.config/pip/pip.conf

Mac OSX:
~/Library/Application Support/pip/pip.conf
~/.pip/pip.conf
/Library/Application Support/pip/pip.conf

Windows:
%APPDATA%\pip\pip.ini
%HOME%\pip\pip.ini
C:\Documents and Settings\All Users\Application Data\PyPA\pip\pip.conf (Windows XP)
C:\ProgramData\PyPA\pip\pip.conf (Windows 7及以后)
</code></pre>
<pre><code>[global]
index-url = http://pypi.douban.com/simple #豆瓣源，可以换成其他的源
trusted-host = pypi.douban.com      #添加豆瓣源为可信主机，要不然可能报错
disable-pip-version-check = true     #取消pip版本检查，排除每次都报最新的pip
timeout = 120
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[plotly库 ]]></title>
        <id>https://dinoxu.github.io/post/plotly-ku/</id>
        <link href="https://dinoxu.github.io/post/plotly-ku/">
        </link>
        <updated>2020-12-15T11:17:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装">安装</h1>
<p><a href="https://github.com/giampaolo/psutil/blob/master/INSTALL.rst">psutil</a><br>
<a href="https://github.com/plotly/orca">orca</a><br>
The Electron runtime requires the presence of an active X11 display server, but many server Linux distributions (e.g. Ubuntu Server) do not include X11 by default. If you do not wish to install X11 on your server, you may install and run orca with Xvfb instead.</p>
<p>解决方法：在软链文件中增加以下脚本，使执行不需要X11<br>
#!/bin/bash<br>
xvfb-run -a /path/to/orca-X.Y.Z-x86_64.AppImage &quot;$@&quot;</p>
<h1 id="使用">使用</h1>
<h2 id="表格">表格</h2>
<p><a href="https://plotly.com/python/figure-factory-table/">Plotly开发文档：figure-factory-table</a><br>
<a href="https://plotly.com/python/table/">Plotly开发文档：table</a></p>
<ul>
<li>
<p>中文显示乱码<br>
1.（<code>可选</code>）在/usr/share/fonts/   中新建文件夹  myfonts<br>
2.将中文字体.ttf 文件放入到文件夹中（可以直接从win系统获取：C:\Windows\Fonts）<br>
3.（<code>可选</code>）设置字体的配置文件  vim /etc/fonts/font.conf<br>
4.（<code>可选</code>）增加 <code>&lt;dir&gt;/usr/share/fonts/myfont&lt;/dir&gt;</code>  保存后退出<br>
5.刷新字体缓存命令：fc-cache<br>
6.查看字体列表命令: fc-list<br>
7.重启项目</p>
</li>
<li>
<p>create_table()修改字体属性</p>
</li>
</ul>
<pre><code>import plotly.io as pio
import plotly.figure_factory as ff
fill_color = ['#FFFFFF']+['#000000'] * 3 + ['#993366'] * 4 + ['#336699'] * 5
 fig = ff.create_table(table_data,font_colors=fill_color) # 根据行修改字体颜色
fig.update_layout(font=dict(
        family=&quot;Microsoft YaHei&quot;,  # 所有标题文字的字体
        size=18,  # 所有标题文字的大小
         )
 )
fig.show()
pio.write_image(fig, 'name.png',width='1200')
</code></pre>
<h2 id="其他">其他</h2>
<p><a href="https://www.jianshu.com/p/4f4daf47cc85">Plotly参数详解</a></p>
]]></content>
    </entry>
</feed>